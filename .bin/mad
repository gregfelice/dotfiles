#!/bin/bash

# Script: aa (launchctl/log shortcut) - macOS Only

usage() {
    echo "Usage: ad [options] <service_name>"
    echo "macOS Options:"
    echo "  -s <service_name>: launchctl list <service_name>"
    echo "  -e <service_name>: launchctl list | grep <service_name> (check if loaded)"
    echo "  -l <service_name>: log show --predicate 'process == \"<service_name>\"' --info --debug --last 1h"
    echo "  -f <service_name>: (not directly applicable - see logs)"
    echo "  -j <service_name>: log show --predicate 'process == \"<service_name>\"' --info --debug --last 1h"
    echo "  -r <service_name>: log show --predicate 'process == \"<service_name>\"' --info --debug --last 1h"
    echo "  -n <number> <service_name>: log show --predicate 'process == \"<service_name>\"' --info --debug --last 1h | tail -n <number>"
    echo "  -a: launchctl list | grep -v 'com.apple' | grep -v 'PID' (active non-apple services)"
    echo "  -i: launchctl list | grep -v 'com.apple' | grep -v 'PID' (loaded non-apple services)"
    echo "  -d: launchctl list | grep -v 'com.apple' | grep -v 'PID' | grep -v loaded (unloaded non-apple services)"
    echo "  -F: (not directly applicable - see logs)"
    echo "  -E: log show --predicate 'eventMessage contains[c] \"error\"' --info --debug --last 1h"
    echo "  -W: log show --predicate 'eventMessage contains[c] \"warning\"' --info --debug --last 1h"
    echo "  -R: log show --predicate 'eventMessage contains[c] \"critical\"' --info --debug --last 1h"
    echo "  -L: log show --predicate 'subsystem == \"com.apple.kernel\"' --info --debug --last 1h"
    echo "  -v: Display more detail"
    echo "  -h: Display this help message"
    exit 1
}

verbose=false

if [ $# -eq 0 ]; then
    usage
fi

while getopts "s:e:l:f:j:r:n:aidFEWRLhv" opt; do
    case "$opt" in
        v)
            echo "verbose is true"
            verbose=true
            ;;
        s)
            service_name="$OPTARG"
            launchctl list "$service_name"
            ;;
        e)
            service_name="$OPTARG"
            launchctl list | grep "$service_name"
            ;;
        l)
            service_name="$OPTARG"
            log show --predicate "process == \"$service_name\"" --info --debug --last 1h
            ;;
        f)
            service_name="$OPTARG"
            echo "Failed service checking not directly applicable on macOS. See logs."
            ;;
        j)
            service_name="$OPTARG"
            log show --predicate "process == \"$service_name\"" --info --debug --last 1h
            ;;
        r)
            service_name="$OPTARG"
            log show --predicate "process == \"$service_name\"" --info --debug --last 1h
            ;;
        n)
            lines="$OPTARG"
            shift # Shift off the number
            service_name="$1"
            log show --predicate "process == \"$service_name\"" --info --debug --last 1h | tail -n "$lines"
            ;;
        a)

            echo; echo "launchctl managed services"; echo
            launchctl list | grep -v 'com.apple' | grep -v 'PID'

            echo; echo "brew managed services"; echo
            brew services list
            ;;
        i)
            launchctl list | grep -v 'com.apple' | grep -v 'PID'
            ;;
        d)
            launchctl list | grep -v 'com.apple' | grep -v 'PID' | grep -v loaded
            ;;
        F)
            echo "Failed service checking not directly applicable on macOS. See logs."
            ;;
        E)
            if $verbose; then
                log show --predicate 'eventMessage contains[c] "error"' --last 1h
            else
                log show --predicate 'eventMessage contains[c] "error"' --info --debug --last 1h | awk '{ print $9 }' | sort | uniq -c | sort -r -n
            fi
            ;;
        W)
            if $verbose; then
                log show --predicate 'eventMessage contains[c] "warning"' --last 1h
            else
                log show --predicate 'eventMessage contains[c] "warning"' --info --debug --last 1h | awk '{ print $9 }' | sort | uniq -c | sort -r -n
            fi
            ;;
        R)
            if $verbose; then
                log show --predicate 'eventMessage contains[c] "critical"' --last 1h
            else
                log show --predicate 'eventMessage contains[c] "critical"' --info --debug --last 1h | awk '{ print $9 }' | sort | uniq -c | sort -r -n
            fi
            ;;
        L)
            log show --predicate 'subsystem == "com.apple.kernel"' --info --debug --last 1h
            ;;
        h)
            usage
            ;;
        \?)
            usage
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            usage
            ;;
    esac
done

shift $((OPTIND - 1))

if [ -n "$1" ] && [ -z "$service_name" ]; then
    echo "Error: Service name must be provided with an option."
    usage
fi
